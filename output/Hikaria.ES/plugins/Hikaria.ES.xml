<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hikaria.ES</name>
    </assembly>
    <members>
        <member name="T:Hikaria.ES.CellViewVisibilityChangedDelegate">
            <summary>
            This delegate handles the visibility changes of cell views
            </summary>
            <param name="cellView">The cell view that changed visibility</param>
        </member>
        <member name="T:Hikaria.ES.CellViewWillRecycleDelegate">
            <summary>
            This delegate will be fired just before the cell view is recycled
            </summary>
            <param name="cellView"></param>
        </member>
        <member name="T:Hikaria.ES.ScrollerScrolledDelegate">
            <summary>
            This delegate handles the scrolling callback of the ScrollRect.
            </summary>
            <param name="scroller">The scroller that called the delegate</param>
            <param name="val">The scroll value of the scroll rect</param>
            <param name="scrollPosition">The scroll position in pixels from the start of the scroller</param>
        </member>
        <member name="T:Hikaria.ES.ScrollerSnappedDelegate">
            <summary>
            This delegate handles the snapping of the scroller.
            </summary>
            <param name="scroller">The scroller that called the delegate</param>
            <param name="cellIndex">The index of the cell view snapped on (this may be different than the data index in case of looping)</param>
            <param name="dataIndex">The index of the data the view snapped on</param>
        </member>
        <member name="T:Hikaria.ES.ScrollerScrollingChangedDelegate">
            <summary>
            This delegate handles the change in state of the scroller (scrolling or not scrolling)
            </summary>
            <param name="scroller">The scroller that changed state</param>
            <param name="scrolling">Whether or not the scroller is scrolling</param>
        </member>
        <member name="T:Hikaria.ES.ScrollerTweeningChangedDelegate">
            <summary>
            This delegate handles the change in state of the scroller (jumping or not jumping)
            </summary>
            <param name="scroller">The scroller that changed state</param>
            <param name="tweening">Whether or not the scroller is tweening</param>
        </member>
        <member name="T:Hikaria.ES.CellViewInstantiated">
            <summary>
            This delegate is called when a cell view is created for the first time (not reused)
            </summary>
            <param name="scroller">The scroller that created the cell view</param>
            <param name="cellView">The cell view that was created</param>
        </member>
        <member name="T:Hikaria.ES.CellViewReused">
            <summary>
            This delegate is called when a cell view is reused from the recycled cell view list
            </summary>
            <param name="scroller">The scroller that reused the cell view</param>
            <param name="cellView">The cell view that was resused</param>
        </member>
        <member name="T:Hikaria.ES.CustomTweenFunction">
            <summary>
            This delegate is called when a tween type is set to custom. See the tweening section below for examples
            ex: linear, easeOutBounce, etc.
            </summary>
            <param name="start">The start value of the tween</param>
            <param name="end">the end value of the tween</param>
            <param name="remainingTimePercentage">the percentage of the remaining time left in the tween</param>
        </member>
        <member name="T:Hikaria.ES.EnhancedScroller">
            <summary>
            The ES allows you to easily set up a dynamic scroller that will recycle views for you. This means
            that using only a handful of views, you can display thousands of rows. This will save memory and processing
            power in your application.
            </summary>
        </member>
        <member name="T:Hikaria.ES.EnhancedScroller.ScrollDirectionEnum">
            <summary>
            The direction this scroller is handling
            </summary>
        </member>
        <member name="T:Hikaria.ES.EnhancedScroller.CellViewPositionEnum">
            <summary>
            Which side of a cell to reference.
            For vertical scrollers, before means above, after means below.
            For horizontal scrollers, before means to left of, after means to the right of.
            </summary>
        </member>
        <member name="T:Hikaria.ES.EnhancedScroller.ScrollbarVisibilityEnum">
            <summary>
            This will set how the scroll bar should be shown based on the data. If no scrollbar
            is attached, then this is ignored. OnlyIfNeeded will hide the scrollbar based on whether
            the scroller is looping or there aren't enough items to scroll.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.scrollDirection">
            <summary>
            The direction the scroller is handling
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.spacing">
            <summary>
            The number of pixels between cell views, starting after the first cell view
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.padding">
            <summary>
            The padding inside of the scroller: top, bottom, left, right.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.loop">
            <summary>
            Whether the scroller should loop the cell views
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.loopWhileDragging">
            <summary>
            Whether the scroller should process loop jumping while being dragged.
            Note: if this is turned off while using a small list size, you may
            see elements missing while dragging near the edges of the list. Turning
            this value off can sometimes help with Unity adding a lot of velocity
            while dragging near the end of a list that loops. If this value is turned
            off, you can mitigate the large inertial velocity by setting the maxVelocity
            value to a non-zero amount (see maxVelocity).
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.maxVelocity">
            <summary>
            The maximum speed the scroller can go. This can be useful to eliminate
            aggressive scrolling by the user. It can also be used to mitigate the
            large inertial velocity that Unity adds in the ScrollRect when dragging
            and looping near the edge of the list (See loopWhileDragging).
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.scrollbarVisibility">
            <summary>
            Whether the scollbar should be shown
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapping">
            <summary>
            Whether snapping is turned on
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapVelocityThreshold">
            <summary>
            This is the speed that will initiate the snap. When the
            scroller slows down to this speed it will snap to the location
            specified.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapWatchOffset">
            <summary>
            The snap offset to watch for. When the snap occurs, this
            location in the scroller will be how which cell to snap to
            is determined.
            Typically, the offset is in the range 0..1, with 0 being
            the top / left of the scroller and 1 being the bottom / right.
            In most situations the watch offset and the jump offset
            will be the same, they are just separated in case you need
            that added functionality.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapJumpToOffset">
            <summary>
            The snap location to move the cell to. When the snap occurs,
            this location in the scroller will be where the snapped cell
            is moved to.
            Typically, the offset is in the range 0..1, with 0 being
            the top / left of the scroller and 1 being the bottom / right.
            In most situations the watch offset and the jump offset
            will be the same, they are just separated in case you need
            that added functionality.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapCellCenterOffset">
            <summary>
            Once the cell has been snapped to the scroller location, this
            value will determine how the cell is centered on that scroller
            location.
            Typically, the offset is in the range 0..1, with 0 being
            the top / left of the cell and 1 being the bottom / right.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapUseCellSpacing">
            <summary>
            Whether to include the spacing between cells when determining the
            cell offset centering.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapTweenType">
            <summary>
            What function to use when interpolating between the current
            scroll position and the snap location. This is also known as easing.
            If you want to go immediately to the snap location you can either
            set the snapTweenType to immediate or set the snapTweenTime to zero.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapTweenTime">
            <summary>
            The time it takes to interpolate between the current scroll
            position and the snap location.
            If you want to go immediately to the snap location you can either
            set the snapTweenType to immediate or set the snapTweenTime to zero.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.snapWhileDragging">
            <summary>
            While true keeps snapping while the scroller is dragged.
            While false, this will disable snapping until the dragging stops.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.forceSnapOnEndDrag">
            <summary>
            Will cause a snap to occur (if snapping is true) when the scroller stops
            dragging. Useful if the touch has moved the scroller, but then is static
            before releasing.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.forceSnapOnPointerUp">
            <summary>
            Will cause a snapt to occue (if snapping is true) when the touch is removed
            from the scroller, even if not dragging.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.interruptTweeningOnDrag">
            <summary>
            Will stop the snap tweening if the touch begins a drag on the scroller the scroller.
            If interruptTweeningOnPointerDown is set, interruptTweeningOnDrag is not necessary.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.interruptTweeningOnPointerDown">
            <summary>
            Will stop the snap tweening if the touch re-engages the scroller
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.tweenPaused">
            <summary>
            If true, the tweening will not process. If false, tweening will resume.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._lookAheadBefore">
            <summary>
            The amount of space to look ahead before the scroller position.
            This allows cells to be loaded before the first visible cell even if they
            are not displayed yet. Good for tweening and loading external resources.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._lookAheadAfter">
            <summary>
            The amount of space to look ahead after the last visible cell.
            This allows cells to be loaded before the last visible cell even if they
            are not displayed yet. Good for tweening and loading external resources.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.cellViewVisibilityChanged">
            <summary>
            This delegate is called when a cell view is hidden or shown
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.cellViewWillRecycle">
            <summary>
            This delegate is called just before a cell view is hidden by recycling
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.scrollerScrolled">
            <summary>
            This delegate is called when the scroll rect scrolls
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.scrollerSnapped">
            <summary>
            This delegate is called when the scroller has snapped to a position
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.scrollerScrollingChanged">
            <summary>
            This delegate is called when the scroller has started or stopped scrolling
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.scrollerTweeningChanged">
            <summary>
            This delegate is called when the scroller has started or stopped tweening
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.cellViewInstantiated">
            <summary>
            This delegate is called when the scroller creates a new cell view from scratch
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.cellViewReused">
            <summary>
            This delegate is called when the scroller reuses a recycled cell view
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller.customTweenFunction">
            <summary>
            This delegate is called when the tween type is set to custom. 
            See the CustomTweenFunction delegate documentation above for more detail.
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.Delegate">
            <summary>
            The Delegate is what the scroller will call when it needs to know information about
            the underlying data or views. This allows a true MVC process.
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.ScrollPosition">
            <summary>
            The absolute position in pixels from the start of the scroller
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.ScrollSize">
            <summary>
            The size of the active cell view container minus the visibile portion
            of the scroller
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.NormalizedScrollPosition">
            <summary>
            The normalized position of the scroller between 0 and 1
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.Loop">
            <summary>
            Whether the scroller should loop the resulting cell views.
            Looping creates three sets of internal size data, attempting
            to keep the scroller in the middle set. If the scroller goes
            outside of this set, it will jump back into the middle set,
            giving the illusion of an infinite set of data.
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.ScrollbarVisibility">
            <summary>
            Sets how the visibility of the scrollbars should be handled
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.Velocity">
            <summary>
            This is the velocity of the scroller.
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.LinearVelocity">
            <summary>
            The linear velocity is the velocity on one axis.
            The scroller should only be moving one one axix.
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.IsScrolling">
            <summary>
            Whether the scroller is scrolling or not
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.IsTweening">
            <summary>
            Whether the scroller is tweening or not
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.IsDragging">
            <summary>
            Whether the scroller is being dragged
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.StartCellViewIndex">
            <summary>
            This is the first cell view index showing in the scroller's visible area
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.EndCellViewIndex">
            <summary>
            This is the last cell view index showing in the scroller's visible area
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.StartDataIndex">
            <summary>
            This is the first data index showing in the scroller's visible area
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.EndDataIndex">
            <summary>
            This is the last data index showing in the scroller's visible area
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.ActiveCellCount">
            <summary>
            The total number of cells visible to the scroller
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.NumberOfCells">
            <summary>
            This is the number of cells in the scroller
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.ScrollRect">
            <summary>
            This is a convenience link to the scroller's scroll rect
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.ScrollRectSize">
            <summary>
            The size of the visible portion of the scroller
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.FirstPadder">
            <summary>
            The first padder before the visible cells
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.LastPadder">
            <summary>
            The last padder after the visible cells
            </summary>
        </member>
        <member name="P:Hikaria.ES.EnhancedScroller.Container">
            <summary>
            Access to the scroll rect container
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.GetCellView(Hikaria.ES.EnhancedScrollerCellView)">
            <summary>
            Create a cell view, or recycle one if it already exists
            </summary>
            <param name="cellPrefab">The prefab to use to create the cell view</param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.ReloadData(System.Single)">
            <summary>
            This resets the internal size list and refreshes the cell views
            </summary>
            <param name="scrollPositionFactor">The percentage of the scroller to start at between 0 and 1, 0 being the start of the scroller</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.RefreshActiveCellViews">
            <summary>
            This calls the RefreshCellView method on each active cell.
            If you override the RefreshCellView method in your cells
            then you can update the UI without having to reload the data.
            Note: this will not change the cell sizes, you will need
            to call ReloadData for that to work.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.ClearAll">
            <summary>
            Removes all cells, both active and recycled from the scroller.
            This will call garbage collection.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.ClearActive">
            <summary>
            Removes all the active cell views. This should only be used if you want
            to get rid of cells because of settings set by Unity that cannot be
            changed at runtime. This will call garbage collection.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.ClearRecycled">
            <summary>
            Removes all the recycled cell views. This should only be used after you
            load in a completely different set of cell views that will not use the
            recycled views. This will call garbage collection.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.ToggleLoop">
            <summary>
            Turn looping on or off. This is just a helper function so
            you don't have to keep track of the state of the looping
            in your own scripts.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.IgnoreLoopJump(System.Boolean)">
            <summary>
            Toggle whether the loop jump calculation is used. Loop jumps
            give the appearance of a continuous stream of cells, when in
            reality it is just a set of three groups of cells.
            Loop jumps can cause issues if you are trying to change the size of
            a cell manually (like for expanding / collapsing) around the
            borders of the cell groups where the jump occurs.
            </summary>
            <param name="ignore"></param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.SetScrollPositionImmediately(System.Single)">
            <summary>
            Sets the scroll position and refresh the active cells.
            Normally the refreshing would occur the next frame as Unity
            picks up the change in the ScrollRect's position.
            If you need to handle active cells immediately after setting
            the scroll position, use this method instead of setting
            the ScrollPosition property directly.
            </summary>
            <param name="scrollPosition"></param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.JumpToDataIndex(System.Int32,System.Single,System.Single,System.Boolean,Hikaria.ES.EnhancedScroller.TweenType,System.Single,System.Action,Hikaria.ES.EnhancedScroller.LoopJumpDirectionEnum,System.Boolean)">
            <summary>
            Jump to a position in the scroller based on a dataIndex. This overload allows you
            to specify a specific offset within a cell as well.
            </summary>
            <param name="dataIndex">he data index to jump to</param>
            <param name="scrollerOffset">The offset from the start (top / left) of the scroller in the range 0..1.
            Outside this range will jump to the location before or after the scroller's viewable area</param>
            <param name="cellOffset">The offset from the start (top / left) of the cell in the range 0..1</param>
            <param name="useSpacing">Whether to calculate in the spacing of the scroller in the jump</param>
            <param name="tweenType">What easing to use for the jump</param>
            <param name="tweenTime">How long to interpolate to the jump point</param>
            <param name="jumpComplete">This delegate is fired when the jump completes</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.Snap">
            <summary>
            Snaps the scroller on command. This is called internally when snapping is set to true and the velocity
            has dropped below the threshold. You can use this to manually snap whenever you like.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.GetScrollPositionForCellViewIndex(System.Int32,Hikaria.ES.EnhancedScroller.CellViewPositionEnum)">
            <summary>
            Gets the scroll position in pixels from the start of the scroller based on the cellViewIndex
            </summary>
            <param name="cellViewIndex">The cell index to look for. This is used instead of dataIndex in case of looping</param>
            <param name="insertPosition">Do we want the start or end of the cell view's position</param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.GetScrollPositionForDataIndex(System.Int32,Hikaria.ES.EnhancedScroller.CellViewPositionEnum)">
            <summary>
            Gets the scroll position in pixels from the start of the scroller based on the dataIndex
            </summary>
            <param name="dataIndex">The data index to look for</param>
            <param name="insertPosition">Do we want the start or end of the cell view's position</param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.GetCellViewIndexAtPosition(System.Single)">
            <summary>
            Gets the index of a cell view at a given position
            </summary>
            <param name="position">The pixel offset from the start of the scroller</param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.GetCellViewAtDataIndex(System.Int32)">
            <summary>
            Get a cell view for a particular data index. If the cell view is not currently
            in the visible range, then this method will return null.
            Note: this is against MVC principles and will couple your controller to the view
            more than this paradigm would suggest. Generally speaking, the view can have knowledge
            about the controller, but the controller should not know anything about the view.
            Use this method sparingly if you are trying to adhere to strict MVC design.
            </summary>
            <param name="dataIndex">The data index of the cell view to return</param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.ToggleTweenPaused(System.Single)">
            <summary>
            Toggles the tween paused state.
            Use this if you want to resume tweening from the current scroll position instead of
            where the tween left off when paused.
            </summary>
            <param name="newTweenTime">Optional new tween time. -1 will use the remaining tween time left.</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.InterruptTween">
            <summary>
            Stops any tweening that is occurring.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._initialized">
            <summary>
            Set after the scroller is first created. This allwos
            us to ignore OnValidate changes at the start
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._updateSpacing">
            <summary>
            Set when the spacing is changed in the inspector. Since we cannot
            make changes during the OnValidate, we have to use this flag to
            later call the _UpdateSpacing method from Update()
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._scrollRect">
            <summary>
            Cached reference to the scrollRect
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._scrollRectTransform">
            <summary>
            Cached reference to the scrollRect's transform
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._scrollbar">
            <summary>
            Cached reference to the scrollbar if it exists
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._container">
            <summary>
            Cached reference to the active cell view container
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._layoutGroup">
            <summary>
            Cached reference to the layout group that handles view positioning
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._delegate">
            <summary>
            Reference to the delegate that will tell this scroller information
            about the underlying data
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._reloadData">
            <summary>
            Flag to tell the scroller to reload the data
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._refreshActive">
            <summary>
            Flag to tell the scroller to refresh the active list of cell views
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._recycledCellViews">
            <summary>
            List of views that have been recycled
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._firstPadder">
            <summary>
            Cached reference to the element used to offset the first visible cell view
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._lastPadder">
            <summary>
            Cached reference to the element used to keep the cell views at the correct size
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._recycledCellViewContainer">
            <summary>
            Cached reference to the container that holds the recycled cell views
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._cellViewSizeArray">
            <summary>
            Internal list of cell view sizes. This is created when the data is reloaded
            to speed up processing.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._cellViewOffsetArray">
            <summary>
            Internal list of cell view offsets. Each cell view offset is an accumulation
            of the offsets previous to it.
            This is created when the data is reloaded to speed up processing.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._scrollPosition">
            <summary>
            The scrollers position
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._activeCellViews">
            <summary>
            The list of cell views that are currently being displayed
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._activeCellViewsStartIndex">
            <summary>
            The index of the first cell view that is being displayed
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._activeCellViewsEndIndex">
            <summary>
            The index of the last cell view that is being displayed
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._loopFirstCellIndex">
            <summary>
            The index of the first element of the middle section of cell view sizes.
            Used only when looping
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._loopLastCellIndex">
            <summary>
            The index of the last element of the middle seciton of cell view sizes.
            used only when looping
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._loopFirstScrollPosition">
            <summary>
            The scroll position of the first element of the middle seciotn of cell views.
            Used only when looping
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._loopLastScrollPosition">
            <summary>
            The scroll position of the last element of the middle section of cell views.
            Used only when looping
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._loopFirstJumpTrigger">
            <summary>
            The position that triggers the scroller to jump to the end of the middle section
            of cell views. This keeps the scroller in the middle section as much as possible.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._loopLastJumpTrigger">
            <summary>
            The position that triggers the scroller to jump to the start of the middle section
            of cell views. This keeps the scroller in the middle section as much as possible.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._lastScrollRectSize">
            <summary>
            The cached value of the last scroll rect size. This is checked every frame to see
            if the scroll rect has resized. If so, it will refresh.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._lastLoop">
            <summary>
            The cached value of the last loop setting. This is checked every frame to see
            if looping was toggled. If so, it will refresh.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._snapCellViewIndex">
            <summary>
            The cell view index we are snapping to
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._snapDataIndex">
            <summary>
            The data index we are snapping to
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._snapJumping">
            <summary>
            Whether we are currently jumping due to a snap
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._snapInertia">
            <summary>
            What the previous inertia setting was before the snap jump.
            We cache it here because we need to turn off inertia while
            manually tweeing.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._lastScrollbarVisibility">
            <summary>
            The cached value of the last scrollbar visibility setting. This is checked every
            frame to see if the scrollbar visibility needs to be changed.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._singleLoopGroupSize">
            <summary>
            The number of cells in one third of the allocated scroller space
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._snapBeforeDrag">
            <summary>
            The snap value to store before the user begins dragging
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._loopBeforeDrag">
            <summary>
            The loop value to store before the user begins dragging.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._ignoreLoopJump">
            <summary>
            Flag to ignore the jump loop that gives the illusion
            of a continuous stream of cells
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._dragFingerCount">
            <summary>
            The number of fingers that are dragging the ScrollRect.
            Used in OnBeginDrag and OnEndDrag
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._interruptTween">
            <summary>
            Internal variable to disable tweening while in progress. This is set by
            OnBeginDrag under certain conditions.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._dragPreviousPos">
            <summary>
            Stores the last drag position in order to calculate if we need to
            do a force snap on OnEndDrag.
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScroller._dragging">
            <summary>
            Keeps track if the scroller is being dragged.
            </summary>
        </member>
        <member name="T:Hikaria.ES.EnhancedScroller.ListPositionEnum">
            <summary>
            Where in the list we are
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._Resize(System.Boolean)">
            <summary>
            This function will create an internal list of sizes and offsets to be used in all calculations.
            It also sets up the loop triggers and positions and initializes the cell views.
            </summary>
            <param name="keepPosition">If true, then the scroller will try to go back to the position it was at before the resize</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._UpdateSpacing(System.Single)">
            <summary>
            Updates the spacing on the scroller
            </summary>
            <param name="spacing">new spacing value</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._AddCellViewSizes">
            <summary>
            Creates a list of cell view sizes for faster access
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._DuplicateCellViewSizes(System.Int32,System.Int32)">
            <summary>
            Create a copy of the cell view sizes. This is only used in looping
            </summary>
            <param name="numberOfTimes">How many times the copy should be made</param>
            <param name="cellCount">How many cells to copy</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._CalculateCellViewOffsets">
            <summary>
            Calculates the offset of each cell, accumulating the values from previous cells
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._GetRecycledCellView(Hikaria.ES.EnhancedScrollerCellView)">
            <summary>
            Get a recycled cell with a given identifier if available
            </summary>
            <param name="cellPrefab">The prefab to check for</param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._ResetVisibleCellViews">
            <summary>
            This sets up the visible cells, adding and recycling as necessary
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._RecycleAllCells">
            <summary>
            Recycles all the active cells
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._RecycleCell(Hikaria.ES.EnhancedScrollerCellView)">
            <summary>
            Recycles one cell view
            </summary>
            <param name="cellView"></param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._AddCellView(System.Int32,Hikaria.ES.EnhancedScroller.ListPositionEnum)">
            <summary>
            Creates a cell view, or recycles if it can
            </summary>
            <param name="cellIndex">The index of the cell view</param>
            <param name="listPosition">Whether to add the cell to the beginning or the end</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._SetPadders">
            <summary>
            This function adjusts the two padders that control the first cell view's
            offset and the overall size of each cell.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._RefreshActive">
            <summary>
            This function is called if the scroller is scrolled, updating the active list of cells
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._CalculateCurrentActiveCellRange(System.Int32@,System.Int32@)">
            <summary>
            Determines which cells can be seen
            </summary>
            <param name="startIndex">The index of the first cell visible</param>
            <param name="endIndex">The index of the last cell visible</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._GetCellIndexAtPosition(System.Single,System.Int32,System.Int32)">
            <summary>
            Gets the index of a cell at a given position based on a subset range.
            This function uses a recursive binary sort to find the index faster.
            </summary>
            <param name="position">The pixel offset from the start of the scroller</param>
            <param name="startIndex">The first index of the range</param>
            <param name="endIndex">The last index of the rnage</param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.Awake">
            <summary>
            Caches and initializes the scroller
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            This event is fired when the user touches the scroller.
            </summary>
            <param name="data">The event data for the touch down</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            This event is fired when the user stops touching the scroller
            </summary>
            <param name="data">The event data for the touch up</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            This event is fired when the user begins dragging on the scroller.
            We can disable looping or snapping while dragging if desired.
            <param name="data">The event data for the drag</param>
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            This event is fired while the user is dragging the ScrollRect.
            We use it to capture the drag position that will later be used in the OnEndDrag method.
            </summary>
            <param name="data">The event data for the drag</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            This event is fired when the user ends dragging on the scroller.
            We can re-enable looping or snapping while dragging if desired.
            <param name="data">The event data for the drag</param>
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.OnValidate">
            <summary>
            Reacts to changes in the inspector
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.LateUpdate">
            <summary>
            Fired at the end of the frame.
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller._ScrollRect_OnValueChanged(UnityEngine.Vector2)">
            <summary>
            Handler for when the scroller changes value
            </summary>
            <param name="val">The scroll rect's value</param>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.SnapJumpComplete">
            <summary>
            This is fired by the tweener when the snap tween is completed
            </summary>
        </member>
        <member name="T:Hikaria.ES.EnhancedScroller.TweenType">
            <summary>
            The easing type
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScroller.TweenPosition(Hikaria.ES.EnhancedScroller.TweenType,System.Single,System.Single,System.Single,System.Action,System.Boolean)">
            <summary>
            Moves the scroll position over time between two points given an easing function. When the
            tween is complete it will fire the jumpComplete delegate.
            </summary>
            <param name="tweenType">The type of easing to use</param>
            <param name="time">The amount of time to interpolate</param>
            <param name="start">The starting scroll position</param>
            <param name="end">The ending scroll position</param>
            <param name="tweenComplete">The action to fire when the tween is complete</param>
            <param name="forceCalculateRange">Make the scroller calculate the active (visible) cells at the end of the tween. Useful if the scroller has not moved, but was reloaded.</param>
            <returns></returns>
        </member>
        <member name="T:Hikaria.ES.EnhancedScrollerCellView">
            <summary>
            This is the base class that all cell views should derive from
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScrollerCellView.cellIdentifier">
            <summary>
            The cellIdentifier is a unique string that allows the scroller
            to handle different types of cells in a single list. Each type
            of cell should have its own identifier
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScrollerCellView.cellIndex">
            <summary>
            The cell index of the cell view
            This will differ from the dataIndex if the list is looping
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScrollerCellView.dataIndex">
            <summary>
            The data index of the cell view
            </summary>
        </member>
        <member name="F:Hikaria.ES.EnhancedScrollerCellView.active">
            <summary>
            Whether the cell is active or recycled
            </summary>
        </member>
        <member name="M:Hikaria.ES.EnhancedScrollerCellView.RefreshCellView">
            <summary>
            This method is called by the scroller when the RefreshActiveCellViews is called on the scroller
            You can override it to update your cell's view UID
            </summary>
        </member>
        <member name="T:Hikaria.ES.IEnhancedScrollerDelegate">
            <summary>
            All scripts that handle the scroller's callbacks should inherit from this interface
            </summary>
        </member>
        <member name="M:Hikaria.ES.IEnhancedScrollerDelegate.GetNumberOfCells(Hikaria.ES.EnhancedScroller)">
            <summary>
            Gets the number of cells in a list of data
            </summary>
            <param name="scroller"></param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.IEnhancedScrollerDelegate.GetCellViewSize(Hikaria.ES.EnhancedScroller,System.Int32)">
            <summary>
            Gets the size of a cell view given the index of the data set.
            This allows you to have different sized cells
            </summary>
            <param name="scroller"></param>
            <param name="dataIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.IEnhancedScrollerDelegate.GetCellView(Hikaria.ES.EnhancedScroller,System.Int32,System.Int32)">
            <summary>
            Gets the cell view that should be used for the data index. Your implementation
            of this function should request a new cell from the scroller so that it can
            properly recycle old cells.
            </summary>
            <param name="scroller"></param>
            <param name="dataIndex"></param>
            <param name="cellIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Hikaria.ES.SmallList`1">
            <summary>
            This is a super light implementation of an array that
            behaves like a list, automatically allocating new memory
            when needed, but not releasing it to garbage collection.
            </summary>
            <typeparam name="T">The type of the list</typeparam>
        </member>
        <member name="F:Hikaria.ES.SmallList`1.data">
            <summary>
            internal storage of list data
            </summary>
        </member>
        <member name="F:Hikaria.ES.SmallList`1.Count">
            <summary>
            The number of elements in the list
            </summary>
        </member>
        <member name="P:Hikaria.ES.SmallList`1.Item(System.Int32)">
            <summary>
            Indexed access to the list items
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.ResizeArray">
            <summary>
            Resizes the array when more memory is needed.
            </summary>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.Clear">
            <summary>
            Instead of releasing the memory to garbage collection,
            the list size is set back to zero
            </summary>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.First">
            <summary>
            Returns the first element of the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.Last">
            <summary>
            Returns the last element of the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.Add(`0)">
            <summary>
            Adds a new element to the array, creating more
            memory if necessary
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.AddStart(`0)">
            <summary>
            Adds a new element to the start of the array, creating more
            memory if necessary
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.Insert(`0,System.Int32)">
            <summary>
            Inserts a new element to the array at the index specified, creating more
            memory if necessary
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.RemoveStart">
            <summary>
            Removes an item from the start of the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item from the index of the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.Remove(`0)">
            <summary>
            Removes an item from the data
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.RemoveEnd">
            <summary>
            Removes an item from the end of the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hikaria.ES.SmallList`1.Contains(`0)">
            <summary>
            Determines if the data contains the item
            </summary>
            <param name="item">The item to compare</param>
            <returns>True if the item exists in teh data</returns>
        </member>
    </members>
</doc>
